/******** Variables ********/

:root{
    --light-color: #fff;
    --primary-light-color: #a374ff;
    --primary-color: #8c52ff;
    --primary-dark-color: #7530ff;
    --medium-color: #d4d4d4;
    --dark-color: #222;
}

/******** All elements **********/


*,
*::before,
*::after{
    /*
    Set the margin nd padding to 0
    Set the box sizing for all elements to inherit
    */
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

/******** Root element **********/

html{
    /*
    Font size of  62.5% of 16px = 10px
    Set the box sizing to border-box, height and width includes padding and border
    */
    font-size: 62.5%;
    box-sizing: border-box;
}

/******** Body element **********/

body {
    /*
     Set the site overall font styling
     Set the height of the site to be a minimum of the viewport height
     */
    font-size: 1.6rem;
    font-family: 'Noto Sans JP', sans-serif;
    color: var(--dark-color);
    font-weight: 400;
    line-height:1.6;
    min-height: 100vh;
}

/********** Grid  Systems **********/

.body{
    /*
    Create a grid with 8 columns and 6 rows
     */
    display: grid;
    grid-template-columns: repeat(8,1fr);
    grid-template-rows: repeat(6,min-content);
    grid-auto-rows: min-content;
    /* Grid area */
    grid-template-areas: 'header header header header header header header header'
                 ' story story story story story story story story'
                ' story story story story story story story story'
                ' story story story story story story story story'
                ' story story story story story story story story'
                'footer footer footer footer footer footer footer footer';
}

/********* Typography **********/

h1{
    font-size: 4rem;
}

h2{
    font-size: 2rem;
}

/********* Header element ***********/

.header{
    /*
    Set the position to relative to keep it in normal flow but with a z index of 1
    This will create a local stack context that the nav will be placed in when screen width is less than 900px
    It will also set the header to have the highest stack level in the main stacking context, this means no elements will
    placed in front of it
     */
    position: relative;
    z-index: 1;
    /*
    Set the element in the overall grid
    Set the padding and background color
     */
    grid-area: header;
    padding: 2rem;
    background-color: var(--dark-color);
    /*
    Set the header to a display of flex and main axis row
    align the items on cross axis to center
    */
    display: flex;
    align-items: center;
}

/********* Logo **************/

.logo{
    /*
    Set the logo to an inline block
    Set the height,width and right spacing
     */
    display: inline-block;
    height: 4.8rem;
    width: auto;
    margin-right:2rem;
    clip-path: circle();
}

/********* Nav element *********/

.nav{
    /*Set the left spacing to auto, in flex takes up all the free space*/
    margin-left: auto;
}

.nav__checkbox,
.nav__button{
    /*
    Hide the checkbox and button, will only be shown when screen less than 900px
    Set the margin left to auto, since it will be a flex item
     */
    display:none;
    margin-left: auto;
}

.nav__button {
    /*
    Align the elements in the center
    Hide the background by setting it to transparent
     */
    text-align: center;
    background-color: transparent;
    color: white;
    cursor: pointer;
}

/*Checkbox states*/

.nav__button:hover .nav__icon,
.nav__button:hover .nav__icon::before,
.nav__button:hover .nav__icon::after {
    /*When the nav button is hover, set the icon and the psuedo before and after to primary color*/
    background-color: var(--primary-color);
}

.nav__checkbox:checked + .nav__button .nav__icon{
    /*When the nav checkbox is checked, hide the middle bar*/
    background-color: transparent;
}

.nav__checkbox:checked + .nav__button .nav__icon::before{
    /*
    When the nav checkbox is checked, apply styles to before pseudo element of icon
    Set the background color to primary color and rotate element by 45 degrees
    */
    background-color: var(--primary-color);
    transform: rotate(45deg);
    top:0;
}

.nav__checkbox:checked + .nav__button .nav__icon::after{
    /*
    When the nav checkbox is checked, apply styles to after pseudo element of icon
    Set the background color to primary color and rotate element by 45 degrees
    */
    background-color: var(--primary-color);
    transform: rotate(-45deg);
    top:0;
}

.nav__checkbox:checked ~ .nav{
    top:0;
    opacity: 1;
    visibility: visible;
}

.nav__checkbox:checked ~ .nav > .nav__list{
    opacity: 1;
    visibility: visible;
}

.nav__icon{
    /*Set the nav icon to a position of relative, this way child elements can be position absolutely to this*/
    position: relative;
}

.nav__icon,
.nav__icon::before,
.nav__icon::after{
    /*
    Set the nav icon as well as before and after pseudo to be an inline block
    Set the width and the height to create a single line
    Set the background color to primary color and set a transition for all properties of .2 seconds
     */
    display: inline-block;
    width: 3rem;
    height:.2rem;
    background-color: var(--light-color);
    transition: all .2s;
}

.nav__icon::before,
.nav__icon::after{
    /*
    Position pseudo elements before and after of nav icon to be absolute
    We set the nav icon to be a position of relative so these elements cna eb positioned based on that
    Set the content property so elements show on screen
     */
    position: absolute;
    left: 0;
    content: "";
}

.nav__icon::before{
    /*Set psuedo before .8rem from top of nav icon*/
    top:.8rem;
}

.nav__icon::after{
    /*Set psuedo after 1.6rem from top of nav icon*/
    top:1.6rem;
}

.nav__list{
    /* Set the list style to none*/
    list-style: none;
    /* Set the display to flex with main axis as row*/
    display: flex;
}

.nav__item:not(.nav__item:last-child){
    /*For ever nav__item that is not the last child, as right spacing */
    margin-right:2rem;
}

/* Link states */
.nav__link,
.nav__link:link,
.nav__link:visited{
    display: inline-block;
    text-decoration: none;
    color: var(--light-color);
    transition: all .2s;
}

.nav__link:hover,
.nav__link:active{
    color: var(--primary-color);
}

.nav__link:focus{
    outline: .2rem solid var(--primary-light-color);

}

/********* Footer element ***********/

.footer{
    /*
    Set the element in the overall grid
    Set the text and background color
    Add padding
    */
    grid-area: footer;
    color: var(--light-color);
    background-color: var(--dark-color);
    padding: 2rem;
}

/*==========================
- MEDIA Queries
 =========================*/


/************* 1200 breakpoint ***********/

@media only screen and (min-width: 75em) {

    .body {
        /*Create a new grid template so main content does not stretch past 1200px*/
        background-image: linear-gradient(to bottom right,var(--primary-light-color),var(--primary-dark-color));
        grid-template-columns: 1fr repeat(6, 20rem) 1fr;
        grid-template-areas: 'header header header header header header header header'
                 ' . story story story story story story .'
                ' . story story story story story story .'
                ' . story story story story story story .'
                ' . story story story story story story .'
                'footer footer footer footer footer footer footer footer';
    }

}

/************ 900 breakpoint ***********/

@media only screen and (max-width: 56.25em) {

    .nav {
        /*
        Set the position to fixed and since the header element has a zindex of 1, when we place this zindex to -1
            sets the stack index for the local header stack context to place everything else inside header in front
            Still places this element ahead of all other elements since the header specifies the main stack index to be higher than all other elements
        Set the top of the nav to be -100% of itself from top of viewport
         */
        position: fixed;
        z-index: -1;
        top: -100%;
        right: 0;
        /*
        Set the font size to 3.2rem
        Set the height and width to take up entire height and width of screen
        Set the background color to dark
         */
        font-size: 3.2rem;
        height: 100vh;
        width: 100vw;
        background-color: var(--dark-color);
        /*
        Hide the nav until the nav button is clicked
        Set the opacity to 0 with a  visibility of hidden
        Set the transition of all properties to be .4s
         */
        opacity:0;
        visibility: hidden;
        transition: all .4s;
    }

    .nav__button {
        /*Show the anv button*/
        display: inline-block;
    }

    .nav__list {
        /*
        Position the nav list according to its nearest positioned ancestor,i.e the nav
        Set it 50 from top and left
        We then translate it -50 in each direction for it to be truley centered
         */
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        /*
        Update the flex direction to be a column instead of row
        Center the content along the main axis
         */
        flex-direction: column;
        justify-content: center;
        /*
         Hide the nav list until the nav button is clicked
        Set the opacity to 0 with a  visibility of collapse
        Set the transition of all properties to be .4s
         */
        opacity:0;
        visibility: collapse;
        transition: all .4s;
    }

    .nav__item {
        padding: 2rem;
    }

    .nav__item:not(.nav__item:last-child) {
        margin-right: 0;
    }

    /* Link states */
    .nav__link,
    .nav__link:link,
    .nav__link:visited {
        border-bottom: .2rem solid transparent;
    }

    .nav__link:hover,
    .nav__link:active {
        border-bottom: .2rem solid var(--primary-color);
    }

}